package com.sun.reflect.proxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;

public class ProxyFactory {
	  private Object target;
	    public ProxyFactory(Object target){
	        this.target=target;
	    }

	   //给目标对象生成代理对象
	    public Object getProxyInstance(){
	    	//类加载器
	    	ClassLoader cl= target.getClass().getClassLoader();
	    	
	    	
	    	Class<?>[] ifClass= target.getClass().getInterfaces();
	    	
	    	
	    	InvocationHandler iHandler = new InvocationHandler() {
                 @Override
                 public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                	
                	 System.out.println(proxy.getClass().getName());
                	 
                	 System.out.println(method);
                	 System.out.println(args[0].toString());
                	 
                     System.out.println("开始事务2");
                     //执行目标对象方法
                     Object returnValue = method.invoke(target, args);
                     
                     System.out.println("提交事务2");
                     return returnValue;
                 }
             };
	    	
             System.out.println("创建代理对象");
	        return Proxy.newProxyInstance(cl,ifClass,iHandler);
	    }
}
